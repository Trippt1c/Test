=======================================
          A PROMise for Yates
=======================================

> This should and will be updated according to new changes and client requests/corrections

=======================================
                Overview
=======================================

> Yates needs help organizing prom given how chaotic it is. He has spreadsheets with tons of data and we need to organize it into tables.

---------------------------------------
              Description
---------------------------------------

Client:     Taylor Yates

Due Date:   December 19, 2019

Team:       Dylan Trang - Sheets/Form integration, Client Communication
            Long Tran - Frontend connections
            David Quinten Sustaita-Robb - GUI
            Minh Nguyen - Backend
            Nick Bui - Backend
            Noah Ruby - Sheets/Form Integration

Language:   Java

Actions Client will take:
1. Run script (.bat file) to open program
2. Submit 2 Excel Spreadsheets in CSV form via the GUI submitter
3. Be able to search for Student, Group, and Table info (details below)
4. Record resulting Table data however they choose

---------------------------------------
                Input
---------------------------------------
> Excel Spreadsheet (CSV) with Students (List of Seniors)
> Excel spreadsheet (CSV) with Student Groupings
    >> Submission via GUI

---------------------------------------
            Sheet format
---------------------------------------
? = optional
: = required
'=' = autopopulate

Sheet 1: Senior Info
++++++++++++++++++++++++++
ID|Last Name|First Name|Middle Name|# of tickets|Cash Amount|Check Amount|Check #|Ticket 1|Ticket 2|Initials|Table #|Group #|

(Int)       ID: Student ID
(String)    Last Name: Student Last Name
(String)    First Name: Student First Name
(String)    Middle Name: Student Middle Name
(Int)       # 0f Tickets: Up to 2 tickets
(Double)    Cash Amount? Stores cash paid.
(Double)    Check Amount? Amount paid in check.
(Int)       Ticket 1?= Ticket number for first ticket.
(Int)       Ticket 2?= Ticket number for second ticket.
(String)    Initials= Initials of registering teacher
(Int)       Table #= ID of Table the Student is at
(Int)       Group #= ID of Group the Student is in

Sheet 2: Grouped up
++++++++++++++++++++++++++

---------------------------------------
                Output
---------------------------------------
> Tables of ___ with groups in them
> A GUI able to search for certain Tables, Students, and Groups and pull up information
    >> for Students search by ID and return Table, Group, Name, and Ticket ID
    >> for Tables return Groups and Table ID
    >> for Groups return Student IDs, Students, and Table

---------------------------------------
                Functions
---------------------------------------
> Can manually remove things
    >> Groups from Tables
    >> Students from Groups

> Can change Groups
    >> Break into subgroups

> Can manually move things around
    >> Move Students, Groups, and Tables

=======================================
            Notes/Guidelines
=======================================

> Tables can hold up to ___ people
    >> Table order doesn't matter

> Groups can be from 1-___ people

> Create new Google Forms and Spreadsheets to use
    > Custom code Form to allow to add more people

> Ticket IDs will be sequential

> Implement Database?
    >> Entails server costs and vulnerabilities
    >> Can just write JSON file to Yates' computer
    >> Local database? may be too complicated to setup each time

> May need to make smaller program to allow teachers to write to google sheets without messing things up with wrong ID

> Make it easy on user (Yates), only has to upload 2 files with a clean UI and only has to run one file
    >> Quinten make Java Swing GUI
    >> Dylan make Batch script to run everything
    >> Make it S.I.C.K
        >> Simple
        >> Intuitive
        >> Clean
        >> Kickass

> Group in tables efficiently; need minimal tables used
    >> Try to fit as many people as possible per table

> Code to ensure longevity of code; needs to work for a long time after we're gone

> Consider Recursion/DP for algorithm
    >>Like a inverted CoinChange Problem

> Security Measures
    >> Encryption?
    >> Consider fraud/duplicated/forgery/infiltration

> Agile Development Process
    >> Constant contact with client
    >> Make changes according to client requests asap
    >> Client may suggest difficult tasks; Attempt first or reason them out of it
    >> Make the best product possible
    >> Meet->Plan->Design->Develop->Test->Evaluate->Repeat

=======================================
           Project Structure
=======================================
Be sure to document any classes added in here

---------------------------------------
            Object Classes
---------------------------------------

Student
++++++++++++++++++
> Stores student info
    >> Name
    >> ID
    >> Group ID
    >> Ticket

Group
++++++++++++++++++
> Stores info of a group
    >> Unique ID
    >> ArrayList of Students
> Can store 1-10 Students

Table
++++++++++++++++++
> Stores info of a Table
    >> Table # (sequential)
    >> ArrayList of Groups
> Max Student capacity of 10

---------------------------------------
            Runner Classes
---------------------------------------

Prom
++++++++++++++++++
> Main runner; does the heavy lifting and logic
> Static class
> Stores Tables
    > ArrayList of Tables

---------------------------------------
            Utility Classes
---------------------------------------

excelReader
++++++++++++++++++
> Acts as scanner for spreadsheet
    >> Can be used to make Students
    >> Use to create Groups

---------------------------------------
            UI Classes
---------------------------------------

myFrame
++++++++++++++++++
> Acts as the basis for the GUI and frame